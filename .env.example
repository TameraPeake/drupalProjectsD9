#
# Copy and rename this file to .env at root of this project.
#

# Manifest settings.
# We can use a custom project called "The Man E Fest" which downloads all OCIO
# site information from the State Update spreadsheet and generates Drush aliases
# and an SSH config file. When running a Drush command with an alias (i.e.
# `vendor/bin/drush @test status`), an alter hook
# (in drush/Commands/custom/AlterCommands/OcioSiteAliasAlterCommands.php) will
# download this project's Drupal alias configuration and save it to
# drush/sites/self.site.yml. This way if a server's host IP changes, we won't
# run into errors. To do this, a manifest ID needs to be provided, which you can
# find in docs/manifest.md.
# MANIFEST_ID=

# Amount of time in seconds to wait before checking if remote manifest has been
# updated. Defaults to 86400 (24 hours).
MANIFEST_UPDATE_INTERVAL=86400

# The manifest functionality can also be explicitly disabled by setting the
# following to true.
# MANIFEST_DISABLED=true

# Environment settings.
# The IADF distribution supports "local", "test", and "production".
# Setting to "local" will enable various development configurations and modules,
# as well as disable unneccessary modules needed in production like captcha,
# security modules, etc.
ENVIRONMENT=local

# Database settings.
DATABASE_NAME=default
DATABASE_USER=user
DATABASE_PASSWORD=user
DATABASE_HOST=db
DATABASE_PORT=3306

# Migration database settings.
# If you're migrating a site from an older version of Drupal, you can add the
# database configuration for that site here, and it will be available when
# creating migrations.
# Example usage for Docksal users:
# - Run `fin imdb /path/to/your/old/drupal/dump.sql [db-name (default "migrate")]
# - OR manually:
# - create a new database called "migrate": `fin db create migrate`
# - import your older Drupal database dump into this new database: `fin db import --db=migrate /path/to/your/old/drupal/dump.sql`
# - Grant your MySQL user all privileges on this new database: `fin exec --in=db 'mysql -uroot -p$MYSQL_ROOT_PASSWORD migrate -e "GRANT ALL PRIVILEGES ON migrate.* TO \"user\"@\"localhost\" IDENTIFIED BY \"user\""'`
# MIGRATE_DATABASE_NAME=migrate
# MIGRATE_DATABASE_USER=user
# MIGRATE_DATABASE_PASSWORD=user
# MIGRATE_DATABASE_HOST=db
# MIGRATE_DATABASE_PORT=3306

# SSH settings.
# Generally it's better to run the `vendor/bin/drush ocio:manifest` custom
# command, which will download and save a Drush aliases file and an SSH config
# file for all OCIO sites listed in the State Update spreadsheet. Then adjust
# your SSH config file to something like the following:
# ```
# Host *.ocio.test *.ocio.prod
#   User YOUR-OCIO-USERNAME # Your OCIO SSH username.
#   IdentityFile ~/.ssh/ocio # Your PEM key file.
#   IdentitiesOnly yes
# Include ocio_config
# ```
# However you can still override your SSH user, identity file, and extra SSH
# options in this file.
# Your OCIO SSH username.
# SSH_USER=
# A path to your OCIO identity file (usually a PEM file).
# SSH_ID_FILE=
# Any extra SSH options you want passed to the SSH command.
# SSH_EXTRA_OPTS=

# rsync Settings
# Automatically add the following extra rsync arguments when running the drush
# ocio:rsync command:
#   - --exclude-from (if the `./config/rsync/excludes.txt` file exists)
#   - --files-from (if the `./config/rsync/includes.txt` file exists)
#   - --delete
DRUSH_RSYNC_ADD_EXTRA_ARGS=true

# Host settings.
HOST_NAME=local.docksal
HOST_PORT=80

# Drush settings.
# You can override Drush global options by using the following format:
# DRUSH_*_*
# For example, to override the global options URI, which in code would be
# retrieved like `$config->get('options.uri')`, you can use DRUSH_OPTIONS_URI.
# As can be seen, the variable to override is prefixed with DRUSH_, periods are
# replaced by underscores, and all text is uppercase.
# see https://raw.githubusercontent.com/drush-ops/drush/master/examples/example.drush.yml
# for more information.

# The base URL used when generating links.
DRUSH_OPTIONS_URI=http://local.docksal
# The Drupal core base directory.
# DRUSH_OPTIONS_ROOT=/usr/docroot/drupal
# Enable verbose mode.
# DRUSH_OPTIONS_VERBOSE=true

# The config sync directory, doesn't usually need to be changed. This path
# should be relative to the app root (i.e. the web folder).
CONFIG_SYNC_DIR=../config/sync

# This site's unique hash salt. Can either be the salt value itself, or a path
# to a file holding the salt (relative to the app root). To generate a new salt,
# run:
# `vendor/bin/drush php-eval 'echo \Drupal\Component\Utility\Crypt::randomBytesBase64(55) . "\n";'`
# and to save a new salt to a file:
# `vendor/bin/drush php-eval 'echo \Drupal\Component\Utility\Crypt::randomBytesBase64(55)' > config/salt.txt`
HASH_SALT=../config/salt.txt

# This site's trusted hosts. Can either be a string of patterns separated by
# newlines, or a path (relative to app root) to a file holding newline-separated
# trusted hosts patterns. For example, for the Worksmart division website,
# locally hosted using Docksal, you could use:
# ^worksmart\.docksal$
# ^worksmart\.iowatest\.gov$
# ^worksmart\.iowa\.gov$
TRUSTED_HOSTS=../config/hosts.txt

# GitLab access token for modules that need access to private files on GitLab
# (i.e. IADF WSD Users, the OCIO Manifest, etc.). You don't need to change this
# unless you want to use your own for some reason.


#GITLAB_ACCESS_TOKEN=
